!function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1).element,u=n(2).element,s=document,a=function(){function e(t){r(this,e),this.rootEl=s.getElementById(t),this.canvasEl=s.createElement("canvas"),this.rootEl.appendChild(this.canvasEl),this.context=this.canvasEl.getContext("2d")}return o(e,[{key:"element",value:function(){return new i(this)}},{key:"group",value:function(){return new u(this)}}]),e}();e.exports=a},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(2).element,u=function(){function e(t,n){if(r(this,e),!t)throw Error("canvas not provided");if(this.canvas=t,this.config={type:"basicEl",visible:!0},n){if(!(n instanceof i))throw Error("Not a proper Group");this.group=n}else this.group=t.rootGroup}return o(e,[{key:"group",value:function(e){return e?(this.group.remove(this),this.group=e,this):this.group}},{key:"erase",value:function(){var e;this.group.remove(this);for(e in this)this.hasOwnProperty(e)&&delete this[e];this.__notifyChange__()}},{key:"hide",value:function(){return this.config.visible&&(this.config.visible=!1,this.__notifyChange__()),this}},{key:"show",value:function(){return this.config.visible||(this.config.visible=!0,this.__notifyChange__()),this}},{key:"toggle",value:function(){return this.config.visible=!this.config.visible,this.__notifyChange__(),this}},{key:"__notifyChange__",value:function(){this.config.visible}}]),e}();e.exports={element:u}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var u=o.get;if(void 0!==u)return u.call(r)},a=n(1).element;console.log(a);var c=function(e){function t(e,n){r(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return i.config.type="group",i.__members__=[],i}return i(t,e),u(t,[{key:"__checkEl__",value:function(e){if(!(e instanceof a))throw Error("Only elements or groups can be added")}},{key:"__checkGroup__",value:function(e){if(!(e instanceof t))throw Error("Group expected")}},{key:"add",value:function(e){var t=0;if(!isNaN(e.length)){for(t=e.length;t--;)this.add(e[t]);return this}return this.__checkEl__(e),e.group.remove(e),e.group=this,this.__members__.push(e),this}},{key:"addAllFrom",value:function(e){var t=void 0,n=0;for(this.__checkGroup__(e),t=e.__members__,n=t.length;n--;);}},{key:"remove",value:function(e){var t=this.__members__,n=0,r=t.length,o=0;for(this.__checkEl__(e);n<r&&t[n]!==e;++n);if(n===r)throw Error("Element not in current group");for(o=n+1;o<r;++o)t[o-1]=t[o];return t.pop(),delete e.group,this}},{key:"removeAll",value:function(){for(var e=this.__members__,t=e.length;t--;)delete e[t].group;return this.__members__=[],this}},{key:"erase",value:function(){for(var e=this.__members__,n=e.length;n--;)e[n].erase();s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"erase",this).call(this)}}]),t}(a);e.exports={element:c}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,