!function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}console.log(r(1));var o=function e(){n(this,e)};e.exports=o},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=r(2),u=function(){function e(t,r){if(n(this,e),!t)throw Error("canvas not provided");if(this.canvas=t,this.config={type:"basicEl",visible:!0},r){if(!(r instanceof i))throw Error("Not a proper Group");this.group=r}else this.group=t.rootGroup}return o(e,[{key:"group",value:function(e){return e?(this.group.remove(this),this.group=e,this):this.group}},{key:"erase",value:function(){var e;this.group.remove(this);for(e in this)this.hasOwnProperty(e)&&delete this[e];this.__notifyChange__()}},{key:"hide",value:function(){return this.config.visible&&(this.config.visible=!1,this.__notifyChange__()),this}},{key:"show",value:function(){return this.config.visible||(this.config.visible=!0,this.__notifyChange__()),this}},{key:"toggle",value:function(){return this.config.visible=!this.config.visible,this.__notifyChange__(),this}},{key:"__notifyChange__",value:function(){this.config.visible}}]),e}();e.exports=u},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function e(t,r,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,r);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,r,n)}if("value"in o)return o.value;var u=o.get;if(void 0!==u)return u.call(n)},c=r(1),a=function(e){function t(e,r){n(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,r));return i.config.type="group",i.__members__=[],i}return i(t,e),u(t,[{key:"__checkEl__",value:function(e){if(!(e instanceof c))throw Error("Only elements or groups can be added")}},{key:"__checkGroup__",value:function(e){if(!(e instanceof t))throw Error("Group expected")}},{key:"add",value:function(e){var t=0;if(!isNaN(e.length)){for(t=e.length;t--;)this.add(e[t]);return this}return this.__checkEl__(e),e.group.remove(e),e.group=this,this.__members__.push(e),this}},{key:"addAllFrom",value:function(e){var t=void 0,r=0;for(this.__checkGroup__(e),t=e.__members__,r=t.length;r--;);}},{key:"remove",value:function(e){var t=this.__members__,r=0,n=t.length,o=0;for(this.__checkEl__(e);r<n&&t[r]!==e;++r);if(r===n)throw Error("Element not in current group");for(o=r+1;o<n;++o)t[o-1]=t[o];return t.pop(),delete e.group,this}},{key:"removeAll",value:function(){for(var e=this.__members__,t=e.length;t--;)delete e[t].group;return this.__members__=[],this}},{key:"erase",value:function(){for(var e=this.__members__,r=e.length;r--;)e[r].erase();s(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"erase",this).call(this)}}]),t}(c);e.exports=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,