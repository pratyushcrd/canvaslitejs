(function(window, document, undefined) {
"use strict";

/**
* Storing all defaults value
* that is used in Library
*/
let libDefaults = {
    canvasHeight: 300,
    canvasWidth: 500,
    fill: '#fff',
    stroke: '#000'
  },
  userDefaults = {
  };
/**
* Constructor function to initialize CanvasLite
*/
class CanvasLite {
  constructor (id, height, width) {
    this.rootGroup = new Group(this, null, true);
    this.brush = new Painter(id, height, width, this.rootGroup);
  }

  /**
  * Create a new rect with configurations
  * Config Ex: {
  *   x : 0,
  *   y : 0,
  *   height: 100,
  *   width : 100,
  *   fill : '#345',
  *   stroke : '#987'
  * }
  */
  rect (config, group) {
    let _config = {};
    if (typeof config !== 'object') {
      _config.x = arguments[0];
      _config.y = arguments[1];
      _config.width = arguments[2];
      _config.height = arguments[3];
      if (arguments[4] instanceof Group || !arguments[4]) {
        return new Rect(this, _config, arguments[4]);
      }
      _config.fill = arguments[4];
      if (arguments[5] instanceof Group || !arguments[5]) {
        return new Rect(this, _config, arguments[5]);
      }
      _config.stroke = arguments[5];
      return new Rect(this, _config, arguments[6]);
    }
    return new Rect(this, config, group);
  }
  /**
  * Create a new element
  */
  element () {
    return new BasicElement(this);
  }
  /**
  * Create a new group
  */
  group () {
    return new Group(this);
  }
  /**
  * clearing canvas
  */
  clear () {
    this.brush.clearCanvas();
  }
}
// Exposing CanvasLite to global space
window.CanvasLite = CanvasLite;

// Getting accurate requestAnimationFrame
(function getAccurateRequestAnimationFrame () {
  var lastTime = 0,
    vendors = ['ms', 'moz', 'webkit', 'o'],
    x = 0,
    xx = vendors.length,
    currTime = 0,
    timeToCall = 0,
    id = 0;
  for (; x < xx && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||
    window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (callback, element) {
      currTime = new Date().getTime();
      timeToCall = Math.max(0, 16 - (currTime - lastTime));
      id = window.setTimeout(function () { callback(currTime + timeToCall); },
        timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };
  }
}());

// Class to manage rendering of elements
class Painter {
  constructor (id, height, width, rootGroup) {
    let painter = this,
      canvas;
    painter.canvas = {
      rootEl: document.getElementById(id),
      canvasEl: document.createElement('canvas'),
      height: height || libDefaults.canvasHeight,
      width: width || libDefaults.canvasWidth
    };
    canvas = painter.canvas;
    canvas.rootEl.appendChild(canvas.canvasEl);
    // Setting height and width of canvas
    canvas.canvasEl.setAttribute('width', canvas.width);
    canvas.canvasEl.setAttribute('height', canvas.height);
    // Setting fallback
    canvas.canvasEl.innerHTML = 'Your browser doesn\'t support canvas!';
    // Getting context and root group
    canvas.context = canvas.canvasEl.getContext('2d');
    canvas.rootGroup = rootGroup;
    this.clearCanvas();
  }
  /**
  * Clearing canvas with state saved
  */
  clearCanvas (saveState) {
    let painter = this,
      canvas = painter.canvas,
      context = canvas.context;
    // Store the current transformation matrix
    if (saveState) {
      context.save();
    }
    context.beginPath();
    context.fillStyle = 'white';
    context.strokeStyle = 'white';
    context.rect(0, 0, canvas.width, canvas.height);
    context.stroke();
    context.fill();
    // Restore the transform
    if (saveState) {
      context.restore();
    }
  }
  // Paint all visible items;
  paintAll () {
    this.clearCanvas();
    this.canvas.rootGroup.__draw__(this.canvas.context);
  }
}

/**
* Basic Element class
* Groups and other Elements inherits this
* contains basic methods and properties required by all groups or elements.
*/
class BasicElement {
  /**
  * BasiElement constructor
  * assign the group, store canvas
  * set type initially to 'basicEl'
  */
  constructor (canvas, group) {
    if (!canvas) {
      throw Error('canvas not provided');
    }
    this.canvas = canvas;
    this.config = {
      type: 'basicEl',
      visible: true
    };
    // Initially assign root group if
    // group not provided
    if (group) {
      if (!(group instanceof Group)) {
        throw Error('Not a proper Group');
      }
      group.add(this);
    } else {
      if (canvas.rootGroup) {
        canvas.rootGroup.add(this);
      } else {
        this.isRoot = true;
      }
    }
  }
  is (type) {
    type += '';
    return this.config.type.toLowerCase() === type.toLowerCase();
  }
  /**
  * Assign new group or
  * get the current assigned group
  */
  group (group) {
    // If group is provided assign, otherwise
    // return current group
    var res;
    if (group) {
      this.group().remove(this);
      group.add(this);
      // Notify group changed
      this.__notifyChange__();
      return res;
    } else {
      return this.__group__;
    }
  }
  /**
  * Erase current element
  */
  erase () {
    var key;
    this.group.remove(this);
    // delete every property of element
    for (key in this) {
      if (this.hasOwnProperty(key)) {
        delete this[key];
      }
    }
    // Notify element erased
    this.__notifyChange__();
  }
  /**
  * Hide current element
  */
  hide () {
    if (this.config.visible) {
      this.config.visible = false;
      this.__notifyChange__(true);
    }
    return this;
  }
  /**
  * Show current element
  */
  show () {
    if (!this.config.visible) {
      this.config.visible = true;
      this.__notifyChange__();
    }
    return this;
  }
  /**
  * Toggle current element's visibility
  */
  toggle () {
    this.config.visible = !this.config.visible;
    this.__notifyChange__();
    return this;
  }
  /**
  * Behave when property of element is changed
  */
  __notifyChange__ (forceNotify) {
    if (this.config && this.config.visible || forceNotify) {
      // Notify change only if visible
      // and if element exists
      if (!this.isRoot) {
        this.group().__notifyChange__();
      } else if (this.canvas.brush) {
        this.canvas.brush.paintAll();
      }
    }
  }
  /**
  * @private
  * Abstract draw method
  */
  __draw__ (context) {
    // Drawmethod to be overridden by every element
    if (!context && !(context instanceof window.CanvasRenderingContext2D)) {
      throw Error('Incorrect context');
    }
  }
}

/**
* Manage groups that elements belong to
* extends BasicElement
*/
class Group extends BasicElement {
  constructor (canvas, group, isRoot) {
    super(canvas, group, isRoot);
    // Set type to group
    this.config.type = 'group';
    this.__members__ = [];
    // Notify element added
    this.__notifyChange__();
  }
  /**
  * Check if is proper element or group
  */
  __checkEl__ (element) {
    if (!(element instanceof BasicElement)) {
      throw Error('Only elements or groups can be added');
    }
  }
  /**
  * Check if is proper group
  */
  __checkGroup__ (element) {
    if (!(element instanceof Group)) {
      throw Error('Group expected');
    }
  }
  /**
  * Add new elements or groups
  * to current group
  */
  add (element) {
    let i = 0;
    // If Array add all elements
    if (!isNaN(element.length)) {
      for (i = element.length; i--;) {
        this.add(element[i]);
      }
      return this;
    }
    this.__checkEl__(element);
    // Remove previous group;
    if (element.group()) {
      element.group().remove(element);
    }
    // asssign new group
    element.__group__ = this;
    this.__members__.push(element);
    return this;
  }
  /**
  * Add new elements or groups
  * to current group from different group
  */
  addAllFrom (group) {
    let arr,
      i = 0;
    this.__checkGroup__(group);
    arr = group.__members__;
    for (i = arr.length; i--;) {

    }
  }
  /**
  * Remove element is member of current group
  */
  remove (element) {
    let members = this.__members__,
      i = 0,
      ii = members.length,
      j = 0;
    this.__checkEl__(element);
    for (; i < ii; ++i) {
      if (members[i] === element) {
        break;
      }
    }
    if (i === ii) { // Element not found
      throw Error('Element not in current group');
    } else { // Remove the element
      for (j = i + 1; j < ii; ++j) {
        members[j - 1] = members[j];
      }
      members.pop();
      delete element.group;
    }
    return this;
  }
  /**
  * Remove all elements
  */
  removeAll () {
    let members = this.__members__,
      i = members.length;
    for (; i--;) {
      delete members[i].group;
    }
    // Remove references of all elements
    this.__members__ = [];
    return this;
  }
  /**
  * Overriding method
  * Erase current group and all its children
  */
  erase () {
    let members = this.__members__,
      i = members.length;
    // remove all children
    for (; i--;) {
      members[i].erase();
    }
    // Remove self
    super.erase();
  }
  /**
  * Function to command all group element to draw itself;
  */
  __draw__ (context) {
    let members = this.__members__,
      i = 0,
      ii = members.length;
    // do not draw if invisible
    if (!this.config.visible) {
      return;
    }
    // Iterating over each member;
    // commanding to draw
    for (; i < ii; ++i) {
      members[i].__draw__(context);
    }
  }
}

/**
* Line element
*/
class Rect extends BasicElement {
  constructor (canvas, elConfig, group) {
    super(canvas, group);
    this.config.type = 'rect';
    this.elConfig = elConfig;
    // Notify element added
    this.__notifyChange__();
  }
  /**
  * Function to describe how element will be drawn
  */
  __draw__ (context) {
    let i,
      rect = this,
      config = rect.elConfig;
    // If no context dont draw
    super.__draw__(context);
    // do not draw if invisible
    if (!this.config.visible) {
      return;
    }
    context.beginPath();
    context.rect(config.x, config.y, config.width, config.height);
    context.fillStyle = config.fill || libDefaults.fill;
    context.strokeStyle = config.stroke || libDefaults.stroke;
    context.stroke();
    context.fill();
  }
} // end Line
}(window, document));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
