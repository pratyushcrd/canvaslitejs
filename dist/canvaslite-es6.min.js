(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false };modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports;}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0);})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1);},function(module,exports,__webpack_require__){console.log(__webpack_require__(2));class CanvasLite{}module.exports=CanvasLite;},function(module,exports,__webpack_require__){let Group=__webpack_require__(3);class BasicElement{constructor(canvas,group){if(!canvas){throw Error('canvas not provided')}this.canvas=canvas;this.config={type:'basicEl',visible:true};if(group){if(!(group instanceof Group)){throw Error('Not a proper Group')}this.group=group}else{this.group=canvas.rootGroup}}group(group){if(group){this.group.remove(this);this.group=group;return this}else{return this.group}}erase(){var key;this.group.remove(this);for(key in this){if(this.hasOwnProperty(key)){delete this[key]}}this.__notifyChange__()}hide(){if(this.config.visible){this.config.visible=false;this.__notifyChange__()}return this}show(){if(!this.config.visible){this.config.visible=true;this.__notifyChange__()}return this}toggle(){this.config.visible=!this.config.visible;this.__notifyChange__();return this}__notifyChange__(){if(this.config.visible){}}}module.exports=BasicElement;},function(module,exports,__webpack_require__){let BasicElement=__webpack_require__(2);class Group extends BasicElement{constructor(canvas,group){super(canvas,group);this.config.type='group';this.__members__=[]}__checkEl__(element){if(!(element instanceof BasicElement)){throw Error('Only elements or groups can be added')}}__checkGroup__(element){if(!(element instanceof Group)){throw Error('Group expected')}}add(element){let i=0;if(!isNaN(element.length)){for(i=element.length;i-=1;){this.add(element[i])}return this}this.__checkEl__(element);element.group.remove(element);element.group=this;this.__members__.push(element);return this}addAllFrom(group){let arr,i=0;this.__checkGroup__(group);arr=group.__members__;for(i=arr.length;i-=1;){}}remove(element){let members=this.__members__,i=0,ii=members.length,j=0;this.__checkEl__(element);for(;i<ii;i+=1){if(members[i]===element){break}}if(i===ii){throw Error('Element not in current group')}else{for(j=i+1;j<ii;j+=1){members[j-1]=members[j]}members.pop();delete element.group}return this}removeAll(){let members=this.__members__,i=members.length;for(;i-=1;){delete members[i].group}this.__members__=[];return this}erase(){let members=this.__members__,i=members.length;for(;i-=1;){members[i].erase()}super.erase()}}module.exports=Group;}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,