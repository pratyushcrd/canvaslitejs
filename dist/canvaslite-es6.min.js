(function(window, document, undefined) {
"use strict";

let doc = document;
/**
* Constructor function to initialize CanvasLite
*/
class CanvasLite {
  constructor (id) {
    this.rootEl = doc.getElementById(id);
    this.canvasEl = doc.createElement('canvas');
    this.rootEl.appendChild(this.canvasEl);
    this.context = this.canvasEl.getContext('2d');
    this.rootGroup = new Group(this, null, true);
  }
  element () {
    return new BasicElement(this);
  }
  group () {
    return new Group(this);
  }
}
// Exposing CanvasLite to global namespace
window.CanvasLite = CanvasLite;

/**
* Basic Element class
* Groups and other Elements inherits this
* contains basic methods and properties required by all groups or elements.
*/
class BasicElement {
  /**
  * BasiElement constructor
  * assign the group, store canvas
  * set type initially to 'basicEl'
  */
  constructor (canvas, group, isRoot) {
    if (!canvas) {
      throw Error('canvas not provided');
    }
    this.canvas = canvas;
    this.config = {
      type: 'basicEl',
      visible: true
    };
    this.isRoot = !!isRoot;
    // Initially assign root group if
    // group not provided
    if (group) {
      if (!(group instanceof Group)) {
        throw Error('Not a proper Group');
      }
      group.add(this);
    } else {
      if (!isRoot) {
        canvas.rootGroup.add(this);
      }
    }
  }
  /**
  * Assign new group or
  * get the current assigned group
  */
  group (group) {
    // If group is provided assign, otherwise
    // return current group
    if (group) {
      this.group.remove(this);
      this.group = group;
      return this;
    } else {
      return this.group;
    }
  }
  /**
  * Erase current element
  */
  erase () {
    var key;
    this.group.remove(this);
    // delete every property of element
    for (key in this) {
      if (this.hasOwnProperty(key)) {
        delete this[key];
      }
    }
    this.__notifyChange__();
  }
  /**
  * Hide current element
  */
  hide () {
    if (this.config.visible) {
      this.config.visible = false;
      this.__notifyChange__();
    }
    return this;
  }
  /**
  * Show current element
  */
  show () {
    if (!this.config.visible) {
      this.config.visible = true;
      this.__notifyChange__();
    }
    return this;
  }
  /**
  * Toggle current element's visibility
  */
  toggle () {
    this.config.visible = !this.config.visible;
    this.__notifyChange__();
    return this;
  }
  /**
  * Behave when property of element is changed
  */
  __notifyChange__ () {
    if (this.config.visible) {
      // Notify change only if visible
    }
  }
}

/**
* Manage groups that elements belong to
* extends BasicElement
*/
class Group extends BasicElement {
  constructor (canvas, group, isRoot) {
    super(canvas, group, isRoot);
    // Set type to group
    this.config.type = 'group';
    this.__members__ = [];
  }
  /**
  * Check if is proper element or group
  */
  __checkEl__ (element) {
    if (!(element instanceof BasicElement)) {
      throw Error('Only elements or groups can be added');
    }
  }
  /**
  * Check if is proper group
  */
  __checkGroup__ (element) {
    if (!(element instanceof Group)) {
      throw Error('Group expected');
    }
  }
  /**
  * Add new elements or groups
  * to current group
  */
  add (element) {
    let i = 0;
    // If Array add all elements
    if (!isNaN(element.length)) {
      for (i = element.length; i--;) {
        this.add(element[i]);
      }
      return this;
    }
    this.__checkEl__(element);
    // Remove previous group;
    if (element.group.remove) {
      element.group.remove(element);
    }
    // asssign new group
    element.group = this;
    this.__members__.push(element);
    return this;
  }
  /**
  * Add new elements or groups
  * to current group from different group
  */
  addAllFrom (group) {
    let arr,
      i = 0;
    this.__checkGroup__(group);
    arr = group.__members__;
    for (i = arr.length; i--;) {

    }
  }
  /**
  * Remove element is member of current group
  */
  remove (element) {
    let members = this.__members__,
      i = 0,
      ii = members.length,
      j = 0;
    this.__checkEl__(element);
    for (; i < ii; ++i) {
      if (members[i] === element) {
        break;
      }
    }
    if (i === ii) { // Element not found
      throw Error('Element not in current group');
    } else { // Remove the element
      for (j = i + 1; j < ii; ++j) {
        members[j - 1] = members[j];
      }
      members.pop();
      delete element.group;
    }
    return this;
  }
  /**
  * Remove all elements
  */
  removeAll () {
    let members = this.__members__,
      i = members.length;
    for (; i--;) {
      delete members[i].group;
    }
    // Remove references of all elements
    this.__members__ = [];
    return this;
  }
  /**
  * Overriding method
  * Erase current group and all its children
  */
  erase () {
    let members = this.__members__,
      i = members.length;
    // remove all children
    for (; i--;) {
      members[i].erase();
    }
    // Remove self
    super.erase();
  }
}
}(window, document));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJjYW52YXNsaXRlLWVzNi5taW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBkb2MgPSBkb2N1bWVudDtcbi8qKlxuKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbml0aWFsaXplIENhbnZhc0xpdGVcbiovXG5jbGFzcyBDYW52YXNMaXRlIHtcbiAgY29uc3RydWN0b3IgKGlkKSB7XG4gICAgdGhpcy5yb290RWwgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIHRoaXMuY2FudmFzRWwgPSBkb2MuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdGhpcy5yb290RWwuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXNFbCk7XG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMucm9vdEdyb3VwID0gbmV3IEdyb3VwKHRoaXMsIG51bGwsIHRydWUpO1xuICB9XG4gIGVsZW1lbnQgKCkge1xuICAgIHJldHVybiBuZXcgQmFzaWNFbGVtZW50KHRoaXMpO1xuICB9XG4gIGdyb3VwICgpIHtcbiAgICByZXR1cm4gbmV3IEdyb3VwKHRoaXMpO1xuICB9XG59XG4vLyBFeHBvc2luZyBDYW52YXNMaXRlIHRvIGdsb2JhbCBuYW1lc3BhY2VcbndpbmRvdy5DYW52YXNMaXRlID0gQ2FudmFzTGl0ZTtcblxuLyoqXG4qIEJhc2ljIEVsZW1lbnQgY2xhc3NcbiogR3JvdXBzIGFuZCBvdGhlciBFbGVtZW50cyBpbmhlcml0cyB0aGlzXG4qIGNvbnRhaW5zIGJhc2ljIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgYWxsIGdyb3VwcyBvciBlbGVtZW50cy5cbiovXG5jbGFzcyBCYXNpY0VsZW1lbnQge1xuICAvKipcbiAgKiBCYXNpRWxlbWVudCBjb25zdHJ1Y3RvclxuICAqIGFzc2lnbiB0aGUgZ3JvdXAsIHN0b3JlIGNhbnZhc1xuICAqIHNldCB0eXBlIGluaXRpYWxseSB0byAnYmFzaWNFbCdcbiAgKi9cbiAgY29uc3RydWN0b3IgKGNhbnZhcywgZ3JvdXAsIGlzUm9vdCkge1xuICAgIGlmICghY2FudmFzKSB7XG4gICAgICB0aHJvdyBFcnJvcignY2FudmFzIG5vdCBwcm92aWRlZCcpO1xuICAgIH1cbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIHR5cGU6ICdiYXNpY0VsJyxcbiAgICAgIHZpc2libGU6IHRydWVcbiAgICB9O1xuICAgIHRoaXMuaXNSb290ID0gISFpc1Jvb3Q7XG4gICAgLy8gSW5pdGlhbGx5IGFzc2lnbiByb290IGdyb3VwIGlmXG4gICAgLy8gZ3JvdXAgbm90IHByb3ZpZGVkXG4gICAgaWYgKGdyb3VwKSB7XG4gICAgICBpZiAoIShncm91cCBpbnN0YW5jZW9mIEdyb3VwKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignTm90IGEgcHJvcGVyIEdyb3VwJyk7XG4gICAgICB9XG4gICAgICBncm91cC5hZGQodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaXNSb290KSB7XG4gICAgICAgIGNhbnZhcy5yb290R3JvdXAuYWRkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgKiBBc3NpZ24gbmV3IGdyb3VwIG9yXG4gICogZ2V0IHRoZSBjdXJyZW50IGFzc2lnbmVkIGdyb3VwXG4gICovXG4gIGdyb3VwIChncm91cCkge1xuICAgIC8vIElmIGdyb3VwIGlzIHByb3ZpZGVkIGFzc2lnbiwgb3RoZXJ3aXNlXG4gICAgLy8gcmV0dXJuIGN1cnJlbnQgZ3JvdXBcbiAgICBpZiAoZ3JvdXApIHtcbiAgICAgIHRoaXMuZ3JvdXAucmVtb3ZlKHRoaXMpO1xuICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdyb3VwO1xuICAgIH1cbiAgfVxuICAvKipcbiAgKiBFcmFzZSBjdXJyZW50IGVsZW1lbnRcbiAgKi9cbiAgZXJhc2UgKCkge1xuICAgIHZhciBrZXk7XG4gICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcyk7XG4gICAgLy8gZGVsZXRlIGV2ZXJ5IHByb3BlcnR5IG9mIGVsZW1lbnRcbiAgICBmb3IgKGtleSBpbiB0aGlzKSB7XG4gICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX19ub3RpZnlDaGFuZ2VfXygpO1xuICB9XG4gIC8qKlxuICAqIEhpZGUgY3VycmVudCBlbGVtZW50XG4gICovXG4gIGhpZGUgKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy52aXNpYmxlKSB7XG4gICAgICB0aGlzLmNvbmZpZy52aXNpYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLl9fbm90aWZ5Q2hhbmdlX18oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICogU2hvdyBjdXJyZW50IGVsZW1lbnRcbiAgKi9cbiAgc2hvdyAoKSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy52aXNpYmxlKSB7XG4gICAgICB0aGlzLmNvbmZpZy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX19ub3RpZnlDaGFuZ2VfXygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgKiBUb2dnbGUgY3VycmVudCBlbGVtZW50J3MgdmlzaWJpbGl0eVxuICAqL1xuICB0b2dnbGUgKCkge1xuICAgIHRoaXMuY29uZmlnLnZpc2libGUgPSAhdGhpcy5jb25maWcudmlzaWJsZTtcbiAgICB0aGlzLl9fbm90aWZ5Q2hhbmdlX18oKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgKiBCZWhhdmUgd2hlbiBwcm9wZXJ0eSBvZiBlbGVtZW50IGlzIGNoYW5nZWRcbiAgKi9cbiAgX19ub3RpZnlDaGFuZ2VfXyAoKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLnZpc2libGUpIHtcbiAgICAgIC8vIE5vdGlmeSBjaGFuZ2Ugb25seSBpZiB2aXNpYmxlXG4gICAgfVxuICB9XG59XG5cbi8qKlxuKiBNYW5hZ2UgZ3JvdXBzIHRoYXQgZWxlbWVudHMgYmVsb25nIHRvXG4qIGV4dGVuZHMgQmFzaWNFbGVtZW50XG4qL1xuY2xhc3MgR3JvdXAgZXh0ZW5kcyBCYXNpY0VsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoY2FudmFzLCBncm91cCwgaXNSb290KSB7XG4gICAgc3VwZXIoY2FudmFzLCBncm91cCwgaXNSb290KTtcbiAgICAvLyBTZXQgdHlwZSB0byBncm91cFxuICAgIHRoaXMuY29uZmlnLnR5cGUgPSAnZ3JvdXAnO1xuICAgIHRoaXMuX19tZW1iZXJzX18gPSBbXTtcbiAgfVxuICAvKipcbiAgKiBDaGVjayBpZiBpcyBwcm9wZXIgZWxlbWVudCBvciBncm91cFxuICAqL1xuICBfX2NoZWNrRWxfXyAoZWxlbWVudCkge1xuICAgIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBCYXNpY0VsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBFcnJvcignT25seSBlbGVtZW50cyBvciBncm91cHMgY2FuIGJlIGFkZGVkJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAqIENoZWNrIGlmIGlzIHByb3BlciBncm91cFxuICAqL1xuICBfX2NoZWNrR3JvdXBfXyAoZWxlbWVudCkge1xuICAgIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBHcm91cCkpIHtcbiAgICAgIHRocm93IEVycm9yKCdHcm91cCBleHBlY3RlZCcpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgKiBBZGQgbmV3IGVsZW1lbnRzIG9yIGdyb3Vwc1xuICAqIHRvIGN1cnJlbnQgZ3JvdXBcbiAgKi9cbiAgYWRkIChlbGVtZW50KSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIC8vIElmIEFycmF5IGFkZCBhbGwgZWxlbWVudHNcbiAgICBpZiAoIWlzTmFOKGVsZW1lbnQubGVuZ3RoKSkge1xuICAgICAgZm9yIChpID0gZWxlbWVudC5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgdGhpcy5hZGQoZWxlbWVudFtpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fX2NoZWNrRWxfXyhlbGVtZW50KTtcbiAgICAvLyBSZW1vdmUgcHJldmlvdXMgZ3JvdXA7XG4gICAgaWYgKGVsZW1lbnQuZ3JvdXAucmVtb3ZlKSB7XG4gICAgICBlbGVtZW50Lmdyb3VwLnJlbW92ZShlbGVtZW50KTtcbiAgICB9XG4gICAgLy8gYXNzc2lnbiBuZXcgZ3JvdXBcbiAgICBlbGVtZW50Lmdyb3VwID0gdGhpcztcbiAgICB0aGlzLl9fbWVtYmVyc19fLnB1c2goZWxlbWVudCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICogQWRkIG5ldyBlbGVtZW50cyBvciBncm91cHNcbiAgKiB0byBjdXJyZW50IGdyb3VwIGZyb20gZGlmZmVyZW50IGdyb3VwXG4gICovXG4gIGFkZEFsbEZyb20gKGdyb3VwKSB7XG4gICAgbGV0IGFycixcbiAgICAgIGkgPSAwO1xuICAgIHRoaXMuX19jaGVja0dyb3VwX18oZ3JvdXApO1xuICAgIGFyciA9IGdyb3VwLl9fbWVtYmVyc19fO1xuICAgIGZvciAoaSA9IGFyci5sZW5ndGg7IGktLTspIHtcblxuICAgIH1cbiAgfVxuICAvKipcbiAgKiBSZW1vdmUgZWxlbWVudCBpcyBtZW1iZXIgb2YgY3VycmVudCBncm91cFxuICAqL1xuICByZW1vdmUgKGVsZW1lbnQpIHtcbiAgICBsZXQgbWVtYmVycyA9IHRoaXMuX19tZW1iZXJzX18sXG4gICAgICBpID0gMCxcbiAgICAgIGlpID0gbWVtYmVycy5sZW5ndGgsXG4gICAgICBqID0gMDtcbiAgICB0aGlzLl9fY2hlY2tFbF9fKGVsZW1lbnQpO1xuICAgIGZvciAoOyBpIDwgaWk7ICsraSkge1xuICAgICAgaWYgKG1lbWJlcnNbaV0gPT09IGVsZW1lbnQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpID09PSBpaSkgeyAvLyBFbGVtZW50IG5vdCBmb3VuZFxuICAgICAgdGhyb3cgRXJyb3IoJ0VsZW1lbnQgbm90IGluIGN1cnJlbnQgZ3JvdXAnKTtcbiAgICB9IGVsc2UgeyAvLyBSZW1vdmUgdGhlIGVsZW1lbnRcbiAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgaWk7ICsraikge1xuICAgICAgICBtZW1iZXJzW2ogLSAxXSA9IG1lbWJlcnNbal07XG4gICAgICB9XG4gICAgICBtZW1iZXJzLnBvcCgpO1xuICAgICAgZGVsZXRlIGVsZW1lbnQuZ3JvdXA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAqIFJlbW92ZSBhbGwgZWxlbWVudHNcbiAgKi9cbiAgcmVtb3ZlQWxsICgpIHtcbiAgICBsZXQgbWVtYmVycyA9IHRoaXMuX19tZW1iZXJzX18sXG4gICAgICBpID0gbWVtYmVycy5sZW5ndGg7XG4gICAgZm9yICg7IGktLTspIHtcbiAgICAgIGRlbGV0ZSBtZW1iZXJzW2ldLmdyb3VwO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgcmVmZXJlbmNlcyBvZiBhbGwgZWxlbWVudHNcbiAgICB0aGlzLl9fbWVtYmVyc19fID0gW107XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICogT3ZlcnJpZGluZyBtZXRob2RcbiAgKiBFcmFzZSBjdXJyZW50IGdyb3VwIGFuZCBhbGwgaXRzIGNoaWxkcmVuXG4gICovXG4gIGVyYXNlICgpIHtcbiAgICBsZXQgbWVtYmVycyA9IHRoaXMuX19tZW1iZXJzX18sXG4gICAgICBpID0gbWVtYmVycy5sZW5ndGg7XG4gICAgLy8gcmVtb3ZlIGFsbCBjaGlsZHJlblxuICAgIGZvciAoOyBpLS07KSB7XG4gICAgICBtZW1iZXJzW2ldLmVyYXNlKCk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBzZWxmXG4gICAgc3VwZXIuZXJhc2UoKTtcbiAgfVxufVxufSh3aW5kb3csIGRvY3VtZW50KSk7XG4iXSwiZmlsZSI6ImNhbnZhc2xpdGUtZXM2Lm1pbi5qcyJ9
