let doc = document;
/**
* Constructor function to initialize CanvasLite
*/
class CanvasLite {
  constructor (id) {
    this.rootEl = doc.getElementById(id);
    this.canvasEl = doc.createElement('canvas');
    this.rootEl.appendChild(this.canvasEl);
    this.context = this.canvasEl.getContext('2d');
    this.rootGroup = new Group(this, null, true);
  }
  element () {
    return new BasicElement(this);
  }
  group () {
    return new Group(this);
  }
}

/**
* Basic Element class
* Groups and other Elements inherits this
* contains basic methods and properties required by all groups or elements.
*/
class BasicElement {
  /**
  * BasiElement constructor
  * assign the group, store canvas
  * set type initially to 'basicEl'
  */
  constructor (canvas, group, isRoot) {
    if (!canvas) {
      throw Error('canvas not provided');
    }
    this.canvas = canvas;
    this.config = {
      type: 'basicEl',
      visible: true
    };
    // Initially assign root group if
    // group not provided
    if (group) {
      if (!(group instanceof Group)) {
        throw Error('Not a proper Group');
      }
      group.add(this);
    } else {
      if (!isRoot) {
        canvas.rootGroup.add(this);
      }
    }
  }
  /**
  * Assign new group or
  * get the current assigned group
  */
  group (group) {
    // If group is provided assign, otherwise
    // return current group
    if (group) {
      this.group.remove(this);
      this.group = group;
      return this;
    } else {
      return this.group;
    }
  }
  /**
  * Erase current element
  */
  erase () {
    var key;
    this.group.remove(this);
    // delete every property of element
    for (key in this) {
      if (this.hasOwnProperty(key)) {
        delete this[key];
      }
    }
    this.__notifyChange__();
  }
  /**
  * Hide current element
  */
  hide () {
    if (this.config.visible) {
      this.config.visible = false;
      this.__notifyChange__();
    }
    return this;
  }
  /**
  * Show current element
  */
  show () {
    if (!this.config.visible) {
      this.config.visible = true;
      this.__notifyChange__();
    }
    return this;
  }
  /**
  * Toggle current element's visibility
  */
  toggle () {
    this.config.visible = !this.config.visible;
    this.__notifyChange__();
    return this;
  }
  /**
  * Behave when property of element is changed
  */
  __notifyChange__ () {
    if (this.config.visible) {
      // Notify change only if visible
    }
  }
}

/**
* Manage groups that elements belong to
* extends BasicElement
*/
class Group extends BasicElement {
  constructor (canvas, group, isRoot) {
    super(canvas, group, isRoot);
    // Set type to group
    this.config.type = 'group';
    this.__members__ = [];
  }
  /**
  * Check if is proper element or group
  */
  __checkEl__ (element) {
    if (!(element instanceof BasicElement)) {
      throw Error('Only elements or groups can be added');
    }
  }
  /**
  * Check if is proper group
  */
  __checkGroup__ (element) {
    if (!(element instanceof Group)) {
      throw Error('Group expected');
    }
  }
  /**
  * Add new elements or groups
  * to current group
  */
  add (element) {
    let i = 0;
    // If Array add all elements
    if (!isNaN(element.length)) {
      for (i = element.length; i--;) {
        this.add(element[i]);
      }
      return this;
    }
    this.__checkEl__(element);
    // Remove previous group;
    element.group.remove(element);
    // asssign new group
    element.group = this;
    this.__members__.push(element);
    return this;
  }
  /**
  * Add new elements or groups
  * to current group from different group
  */
  addAllFrom (group) {
    let arr,
      i = 0;
    this.__checkGroup__(group);
    arr = group.__members__;
    for (i = arr.length; i--;) {

    }
  }
  /**
  * Remove element is member of current group
  */
  remove (element) {
    let members = this.__members__,
      i = 0,
      ii = members.length,
      j = 0;
    this.__checkEl__(element);
    for (; i < ii; ++i) {
      if (members[i] === element) {
        break;
      }
    }
    if (i === ii) { // Element not found
      throw Error('Element not in current group');
    } else { // Remove the element
      for (j = i + 1; j < ii; ++j) {
        members[j - 1] = members[j];
      }
      members.pop();
      delete element.group;
    }
    return this;
  }
  /**
  * Remove all elements
  */
  removeAll () {
    let members = this.__members__,
      i = members.length;
    for (; i--;) {
      delete members[i].group;
    }
    // Remove references of all elements
    this.__members__ = [];
    return this;
  }
  /**
  * Overriding method
  * Erase current group and all its children
  */
  erase () {
    let members = this.__members__,
      i = members.length;
    // remove all children
    for (; i--;) {
      members[i].erase();
    }
    // Remove self
    super.erase();
  }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJjYW52YXNsaXRlLWVzNi5taW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGRvYyA9IGRvY3VtZW50O1xuLyoqXG4qIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaXRpYWxpemUgQ2FudmFzTGl0ZVxuKi9cbmNsYXNzIENhbnZhc0xpdGUge1xuICBjb25zdHJ1Y3RvciAoaWQpIHtcbiAgICB0aGlzLnJvb3RFbCA9IGRvYy5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgdGhpcy5jYW52YXNFbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0aGlzLnJvb3RFbC5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhc0VsKTtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhc0VsLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5yb290R3JvdXAgPSBuZXcgR3JvdXAodGhpcywgbnVsbCwgdHJ1ZSk7XG4gIH1cbiAgZWxlbWVudCAoKSB7XG4gICAgcmV0dXJuIG5ldyBCYXNpY0VsZW1lbnQodGhpcyk7XG4gIH1cbiAgZ3JvdXAgKCkge1xuICAgIHJldHVybiBuZXcgR3JvdXAodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4qIEJhc2ljIEVsZW1lbnQgY2xhc3NcbiogR3JvdXBzIGFuZCBvdGhlciBFbGVtZW50cyBpbmhlcml0cyB0aGlzXG4qIGNvbnRhaW5zIGJhc2ljIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgYWxsIGdyb3VwcyBvciBlbGVtZW50cy5cbiovXG5jbGFzcyBCYXNpY0VsZW1lbnQge1xuICAvKipcbiAgKiBCYXNpRWxlbWVudCBjb25zdHJ1Y3RvclxuICAqIGFzc2lnbiB0aGUgZ3JvdXAsIHN0b3JlIGNhbnZhc1xuICAqIHNldCB0eXBlIGluaXRpYWxseSB0byAnYmFzaWNFbCdcbiAgKi9cbiAgY29uc3RydWN0b3IgKGNhbnZhcywgZ3JvdXAsIGlzUm9vdCkge1xuICAgIGlmICghY2FudmFzKSB7XG4gICAgICB0aHJvdyBFcnJvcignY2FudmFzIG5vdCBwcm92aWRlZCcpO1xuICAgIH1cbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIHR5cGU6ICdiYXNpY0VsJyxcbiAgICAgIHZpc2libGU6IHRydWVcbiAgICB9O1xuICAgIC8vIEluaXRpYWxseSBhc3NpZ24gcm9vdCBncm91cCBpZlxuICAgIC8vIGdyb3VwIG5vdCBwcm92aWRlZFxuICAgIGlmIChncm91cCkge1xuICAgICAgaWYgKCEoZ3JvdXAgaW5zdGFuY2VvZiBHcm91cCkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ05vdCBhIHByb3BlciBHcm91cCcpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYWRkKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlzUm9vdCkge1xuICAgICAgICBjYW52YXMucm9vdEdyb3VwLmFkZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICogQXNzaWduIG5ldyBncm91cCBvclxuICAqIGdldCB0aGUgY3VycmVudCBhc3NpZ25lZCBncm91cFxuICAqL1xuICBncm91cCAoZ3JvdXApIHtcbiAgICAvLyBJZiBncm91cCBpcyBwcm92aWRlZCBhc3NpZ24sIG90aGVyd2lzZVxuICAgIC8vIHJldHVybiBjdXJyZW50IGdyb3VwXG4gICAgaWYgKGdyb3VwKSB7XG4gICAgICB0aGlzLmdyb3VwLnJlbW92ZSh0aGlzKTtcbiAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5ncm91cDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICogRXJhc2UgY3VycmVudCBlbGVtZW50XG4gICovXG4gIGVyYXNlICgpIHtcbiAgICB2YXIga2V5O1xuICAgIHRoaXMuZ3JvdXAucmVtb3ZlKHRoaXMpO1xuICAgIC8vIGRlbGV0ZSBldmVyeSBwcm9wZXJ0eSBvZiBlbGVtZW50XG4gICAgZm9yIChrZXkgaW4gdGhpcykge1xuICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9fbm90aWZ5Q2hhbmdlX18oKTtcbiAgfVxuICAvKipcbiAgKiBIaWRlIGN1cnJlbnQgZWxlbWVudFxuICAqL1xuICBoaWRlICgpIHtcbiAgICBpZiAodGhpcy5jb25maWcudmlzaWJsZSkge1xuICAgICAgdGhpcy5jb25maWcudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fX25vdGlmeUNoYW5nZV9fKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAqIFNob3cgY3VycmVudCBlbGVtZW50XG4gICovXG4gIHNob3cgKCkge1xuICAgIGlmICghdGhpcy5jb25maWcudmlzaWJsZSkge1xuICAgICAgdGhpcy5jb25maWcudmlzaWJsZSA9IHRydWU7XG4gICAgICB0aGlzLl9fbm90aWZ5Q2hhbmdlX18oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICogVG9nZ2xlIGN1cnJlbnQgZWxlbWVudCdzIHZpc2liaWxpdHlcbiAgKi9cbiAgdG9nZ2xlICgpIHtcbiAgICB0aGlzLmNvbmZpZy52aXNpYmxlID0gIXRoaXMuY29uZmlnLnZpc2libGU7XG4gICAgdGhpcy5fX25vdGlmeUNoYW5nZV9fKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICogQmVoYXZlIHdoZW4gcHJvcGVydHkgb2YgZWxlbWVudCBpcyBjaGFuZ2VkXG4gICovXG4gIF9fbm90aWZ5Q2hhbmdlX18gKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy52aXNpYmxlKSB7XG4gICAgICAvLyBOb3RpZnkgY2hhbmdlIG9ubHkgaWYgdmlzaWJsZVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiogTWFuYWdlIGdyb3VwcyB0aGF0IGVsZW1lbnRzIGJlbG9uZyB0b1xuKiBleHRlbmRzIEJhc2ljRWxlbWVudFxuKi9cbmNsYXNzIEdyb3VwIGV4dGVuZHMgQmFzaWNFbGVtZW50IHtcbiAgY29uc3RydWN0b3IgKGNhbnZhcywgZ3JvdXAsIGlzUm9vdCkge1xuICAgIHN1cGVyKGNhbnZhcywgZ3JvdXAsIGlzUm9vdCk7XG4gICAgLy8gU2V0IHR5cGUgdG8gZ3JvdXBcbiAgICB0aGlzLmNvbmZpZy50eXBlID0gJ2dyb3VwJztcbiAgICB0aGlzLl9fbWVtYmVyc19fID0gW107XG4gIH1cbiAgLyoqXG4gICogQ2hlY2sgaWYgaXMgcHJvcGVyIGVsZW1lbnQgb3IgZ3JvdXBcbiAgKi9cbiAgX19jaGVja0VsX18gKGVsZW1lbnQpIHtcbiAgICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgQmFzaWNFbGVtZW50KSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ09ubHkgZWxlbWVudHMgb3IgZ3JvdXBzIGNhbiBiZSBhZGRlZCcpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgKiBDaGVjayBpZiBpcyBwcm9wZXIgZ3JvdXBcbiAgKi9cbiAgX19jaGVja0dyb3VwX18gKGVsZW1lbnQpIHtcbiAgICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgR3JvdXApKSB7XG4gICAgICB0aHJvdyBFcnJvcignR3JvdXAgZXhwZWN0ZWQnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICogQWRkIG5ldyBlbGVtZW50cyBvciBncm91cHNcbiAgKiB0byBjdXJyZW50IGdyb3VwXG4gICovXG4gIGFkZCAoZWxlbWVudCkge1xuICAgIGxldCBpID0gMDtcbiAgICAvLyBJZiBBcnJheSBhZGQgYWxsIGVsZW1lbnRzXG4gICAgaWYgKCFpc05hTihlbGVtZW50Lmxlbmd0aCkpIHtcbiAgICAgIGZvciAoaSA9IGVsZW1lbnQubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIHRoaXMuYWRkKGVsZW1lbnRbaV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX19jaGVja0VsX18oZWxlbWVudCk7XG4gICAgLy8gUmVtb3ZlIHByZXZpb3VzIGdyb3VwO1xuICAgIGVsZW1lbnQuZ3JvdXAucmVtb3ZlKGVsZW1lbnQpO1xuICAgIC8vIGFzc3NpZ24gbmV3IGdyb3VwXG4gICAgZWxlbWVudC5ncm91cCA9IHRoaXM7XG4gICAgdGhpcy5fX21lbWJlcnNfXy5wdXNoKGVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAqIEFkZCBuZXcgZWxlbWVudHMgb3IgZ3JvdXBzXG4gICogdG8gY3VycmVudCBncm91cCBmcm9tIGRpZmZlcmVudCBncm91cFxuICAqL1xuICBhZGRBbGxGcm9tIChncm91cCkge1xuICAgIGxldCBhcnIsXG4gICAgICBpID0gMDtcbiAgICB0aGlzLl9fY2hlY2tHcm91cF9fKGdyb3VwKTtcbiAgICBhcnIgPSBncm91cC5fX21lbWJlcnNfXztcbiAgICBmb3IgKGkgPSBhcnIubGVuZ3RoOyBpLS07KSB7XG5cbiAgICB9XG4gIH1cbiAgLyoqXG4gICogUmVtb3ZlIGVsZW1lbnQgaXMgbWVtYmVyIG9mIGN1cnJlbnQgZ3JvdXBcbiAgKi9cbiAgcmVtb3ZlIChlbGVtZW50KSB7XG4gICAgbGV0IG1lbWJlcnMgPSB0aGlzLl9fbWVtYmVyc19fLFxuICAgICAgaSA9IDAsXG4gICAgICBpaSA9IG1lbWJlcnMubGVuZ3RoLFxuICAgICAgaiA9IDA7XG4gICAgdGhpcy5fX2NoZWNrRWxfXyhlbGVtZW50KTtcbiAgICBmb3IgKDsgaSA8IGlpOyArK2kpIHtcbiAgICAgIGlmIChtZW1iZXJzW2ldID09PSBlbGVtZW50KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA9PT0gaWkpIHsgLy8gRWxlbWVudCBub3QgZm91bmRcbiAgICAgIHRocm93IEVycm9yKCdFbGVtZW50IG5vdCBpbiBjdXJyZW50IGdyb3VwJyk7XG4gICAgfSBlbHNlIHsgLy8gUmVtb3ZlIHRoZSBlbGVtZW50XG4gICAgICBmb3IgKGogPSBpICsgMTsgaiA8IGlpOyArK2opIHtcbiAgICAgICAgbWVtYmVyc1tqIC0gMV0gPSBtZW1iZXJzW2pdO1xuICAgICAgfVxuICAgICAgbWVtYmVycy5wb3AoKTtcbiAgICAgIGRlbGV0ZSBlbGVtZW50Lmdyb3VwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgKiBSZW1vdmUgYWxsIGVsZW1lbnRzXG4gICovXG4gIHJlbW92ZUFsbCAoKSB7XG4gICAgbGV0IG1lbWJlcnMgPSB0aGlzLl9fbWVtYmVyc19fLFxuICAgICAgaSA9IG1lbWJlcnMubGVuZ3RoO1xuICAgIGZvciAoOyBpLS07KSB7XG4gICAgICBkZWxldGUgbWVtYmVyc1tpXS5ncm91cDtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIHJlZmVyZW5jZXMgb2YgYWxsIGVsZW1lbnRzXG4gICAgdGhpcy5fX21lbWJlcnNfXyA9IFtdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAqIE92ZXJyaWRpbmcgbWV0aG9kXG4gICogRXJhc2UgY3VycmVudCBncm91cCBhbmQgYWxsIGl0cyBjaGlsZHJlblxuICAqL1xuICBlcmFzZSAoKSB7XG4gICAgbGV0IG1lbWJlcnMgPSB0aGlzLl9fbWVtYmVyc19fLFxuICAgICAgaSA9IG1lbWJlcnMubGVuZ3RoO1xuICAgIC8vIHJlbW92ZSBhbGwgY2hpbGRyZW5cbiAgICBmb3IgKDsgaS0tOykge1xuICAgICAgbWVtYmVyc1tpXS5lcmFzZSgpO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgc2VsZlxuICAgIHN1cGVyLmVyYXNlKCk7XG4gIH1cbn1cbiJdLCJmaWxlIjoiY2FudmFzbGl0ZS1lczYubWluLmpzIn0=
