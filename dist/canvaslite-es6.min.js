let doc = document;
/**
* Constructor function to initialize CanvasLite
*/
class CanvasLite {
  constructor (id) {
    this.rootEl = doc.getElementById(id);
    this.canvasEl = doc.createElement('canvas');
    this.rootEl.appendChild(this.canvasEl);
    this.context = this.canvasEl.getContext('2d');
  }
  element () {
    return new Element(this);
  }
  group () {
    return new Group(this);
  }
}

/**
* Basic Element class
* Groups and other Elements inherits this
* contains basic methods and properties required by all groups or elements.
*/
class BasicElement {
  /**
  * BasiElement constructor
  * assign the group, store canvas
  * set type initially to 'basicEl'
  */
  constructor (canvas, group) {
    if (!canvas) {
      throw Error('canvas not provided');
    }
    this.canvas = canvas;
    this.config = {
      type: 'basicEl',
      visible: true
    };
    // Initially assign root group if
    // group not provided
    if (group) {
      if (!(group instanceof Group)) {
        throw Error('Not a proper Group');
      }
      this.group = group;
    } else {
      this.group = canvas.rootGroup;
    }
  }
  /**
  * Assign new group or
  * get the current assigned group
  */
  group (group) {
    // If group is provided assign, otherwise
    // return current group
    if (group) {
      this.group.remove(this);
      this.group = group;
      return this;
    } else {
      return this.group;
    }
  }
  /**
  * Erase current element
  */
  erase () {
    var key;
    this.group.remove(this);
    // delete every property of element
    for (key in this) {
      if (this.hasOwnProperty(key)) {
        delete this[key];
      }
    }
    this.__notifyChange__();
  }
  /**
  * Hide current element
  */
  hide () {
    if (this.config.visible) {
      this.config.visible = false;
      this.__notifyChange__();
    }
    return this;
  }
  /**
  * Show current element
  */
  show () {
    if (!this.config.visible) {
      this.config.visible = true;
      this.__notifyChange__();
    }
    return this;
  }
  /**
  * Toggle current element's visibility
  */
  toggle () {
    this.config.visible = !this.config.visible;
    this.__notifyChange__();
    return this;
  }
  /**
  * Behave when property of element is changed
  */
  __notifyChange__ () {
    if (this.config.visible) {
      // Notify change only if visible
    }
  }
}

/**
* Manage groups that elements belong to
* extends BasicElement
*/
class Group extends BasicElement {
  constructor (canvas, group) {
    super(canvas, group);
    // Set type to group
    this.config.type = 'group';
    this.__members__ = [];
  }
  /**
  * Check if is proper element or group
  */
  __checkEl__ (element) {
    if (!(element instanceof BasicElement)) {
      throw Error('Only elements or groups can be added');
    }
  }
  /**
  * Check if is proper group
  */
  __checkGroup__ (element) {
    if (!(element instanceof Group)) {
      throw Error('Group expected');
    }
  }
  /**
  * Add new elements or groups
  * to current group
  */
  add (element) {
    let i = 0;
    // If Array add all elements
    if (!isNaN(element.length)) {
      for (i = element.length; i--;) {
        this.add(element[i]);
      }
      return this;
    }
    this.__checkEl__(element);
    // Remove previous group;
    element.group.remove(element);
    // asssign new group
    element.group = this;
    this.__members__.push(element);
    return this;
  }
  /**
  * Add new elements or groups
  * to current group from different group
  */
  addAllFrom (group) {
    let arr,
      i = 0;
    this.__checkGroup__(group);
    arr = group.__members__;
    for (i = arr.length; i--;) {

    }
  }
  /**
  * Remove element is member of current group
  */
  remove (element) {
    let members = this.__members__,
      i = 0,
      ii = members.length,
      j = 0;
    this.__checkEl__(element);
    for (; i < ii; ++i) {
      if (members[i] === element) {
        break;
      }
    }
    if (i === ii) { // Element not found
      throw Error('Element not in current group');
    } else { // Remove the element
      for (j = i + 1; j < ii; ++j) {
        members[j - 1] = members[j];
      }
      members.pop();
      delete element.group;
    }
    return this;
  }
  /**
  * Remove all elements
  */
  removeAll () {
    let members = this.__members__,
      i = members.length;
    for (; i--;) {
      delete members[i].group;
    }
    // Remove references of all elements
    this.__members__ = [];
    return this;
  }
  /**
  * Overriding method
  * Erase current group and all its children
  */
  erase () {
    let members = this.__members__,
      i = members.length;
    // remove all children
    for (; i--;) {
      members[i].erase();
    }
    // Remove self
    super.erase();
  }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJjYW52YXNsaXRlLWVzNi5taW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGRvYyA9IGRvY3VtZW50O1xuLyoqXG4qIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaXRpYWxpemUgQ2FudmFzTGl0ZVxuKi9cbmNsYXNzIENhbnZhc0xpdGUge1xuICBjb25zdHJ1Y3RvciAoaWQpIHtcbiAgICB0aGlzLnJvb3RFbCA9IGRvYy5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgdGhpcy5jYW52YXNFbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0aGlzLnJvb3RFbC5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhc0VsKTtcbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhc0VsLmdldENvbnRleHQoJzJkJyk7XG4gIH1cbiAgZWxlbWVudCAoKSB7XG4gICAgcmV0dXJuIG5ldyBFbGVtZW50KHRoaXMpO1xuICB9XG4gIGdyb3VwICgpIHtcbiAgICByZXR1cm4gbmV3IEdyb3VwKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuKiBCYXNpYyBFbGVtZW50IGNsYXNzXG4qIEdyb3VwcyBhbmQgb3RoZXIgRWxlbWVudHMgaW5oZXJpdHMgdGhpc1xuKiBjb250YWlucyBiYXNpYyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIHJlcXVpcmVkIGJ5IGFsbCBncm91cHMgb3IgZWxlbWVudHMuXG4qL1xuY2xhc3MgQmFzaWNFbGVtZW50IHtcbiAgLyoqXG4gICogQmFzaUVsZW1lbnQgY29uc3RydWN0b3JcbiAgKiBhc3NpZ24gdGhlIGdyb3VwLCBzdG9yZSBjYW52YXNcbiAgKiBzZXQgdHlwZSBpbml0aWFsbHkgdG8gJ2Jhc2ljRWwnXG4gICovXG4gIGNvbnN0cnVjdG9yIChjYW52YXMsIGdyb3VwKSB7XG4gICAgaWYgKCFjYW52YXMpIHtcbiAgICAgIHRocm93IEVycm9yKCdjYW52YXMgbm90IHByb3ZpZGVkJyk7XG4gICAgfVxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgdHlwZTogJ2Jhc2ljRWwnLFxuICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgIH07XG4gICAgLy8gSW5pdGlhbGx5IGFzc2lnbiByb290IGdyb3VwIGlmXG4gICAgLy8gZ3JvdXAgbm90IHByb3ZpZGVkXG4gICAgaWYgKGdyb3VwKSB7XG4gICAgICBpZiAoIShncm91cCBpbnN0YW5jZW9mIEdyb3VwKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignTm90IGEgcHJvcGVyIEdyb3VwJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ3JvdXAgPSBjYW52YXMucm9vdEdyb3VwO1xuICAgIH1cbiAgfVxuICAvKipcbiAgKiBBc3NpZ24gbmV3IGdyb3VwIG9yXG4gICogZ2V0IHRoZSBjdXJyZW50IGFzc2lnbmVkIGdyb3VwXG4gICovXG4gIGdyb3VwIChncm91cCkge1xuICAgIC8vIElmIGdyb3VwIGlzIHByb3ZpZGVkIGFzc2lnbiwgb3RoZXJ3aXNlXG4gICAgLy8gcmV0dXJuIGN1cnJlbnQgZ3JvdXBcbiAgICBpZiAoZ3JvdXApIHtcbiAgICAgIHRoaXMuZ3JvdXAucmVtb3ZlKHRoaXMpO1xuICAgICAgdGhpcy5ncm91cCA9IGdyb3VwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdyb3VwO1xuICAgIH1cbiAgfVxuICAvKipcbiAgKiBFcmFzZSBjdXJyZW50IGVsZW1lbnRcbiAgKi9cbiAgZXJhc2UgKCkge1xuICAgIHZhciBrZXk7XG4gICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcyk7XG4gICAgLy8gZGVsZXRlIGV2ZXJ5IHByb3BlcnR5IG9mIGVsZW1lbnRcbiAgICBmb3IgKGtleSBpbiB0aGlzKSB7XG4gICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX19ub3RpZnlDaGFuZ2VfXygpO1xuICB9XG4gIC8qKlxuICAqIEhpZGUgY3VycmVudCBlbGVtZW50XG4gICovXG4gIGhpZGUgKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy52aXNpYmxlKSB7XG4gICAgICB0aGlzLmNvbmZpZy52aXNpYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLl9fbm90aWZ5Q2hhbmdlX18oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICogU2hvdyBjdXJyZW50IGVsZW1lbnRcbiAgKi9cbiAgc2hvdyAoKSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy52aXNpYmxlKSB7XG4gICAgICB0aGlzLmNvbmZpZy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX19ub3RpZnlDaGFuZ2VfXygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgKiBUb2dnbGUgY3VycmVudCBlbGVtZW50J3MgdmlzaWJpbGl0eVxuICAqL1xuICB0b2dnbGUgKCkge1xuICAgIHRoaXMuY29uZmlnLnZpc2libGUgPSAhdGhpcy5jb25maWcudmlzaWJsZTtcbiAgICB0aGlzLl9fbm90aWZ5Q2hhbmdlX18oKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgKiBCZWhhdmUgd2hlbiBwcm9wZXJ0eSBvZiBlbGVtZW50IGlzIGNoYW5nZWRcbiAgKi9cbiAgX19ub3RpZnlDaGFuZ2VfXyAoKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLnZpc2libGUpIHtcbiAgICAgIC8vIE5vdGlmeSBjaGFuZ2Ugb25seSBpZiB2aXNpYmxlXG4gICAgfVxuICB9XG59XG5cbi8qKlxuKiBNYW5hZ2UgZ3JvdXBzIHRoYXQgZWxlbWVudHMgYmVsb25nIHRvXG4qIGV4dGVuZHMgQmFzaWNFbGVtZW50XG4qL1xuY2xhc3MgR3JvdXAgZXh0ZW5kcyBCYXNpY0VsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoY2FudmFzLCBncm91cCkge1xuICAgIHN1cGVyKGNhbnZhcywgZ3JvdXApO1xuICAgIC8vIFNldCB0eXBlIHRvIGdyb3VwXG4gICAgdGhpcy5jb25maWcudHlwZSA9ICdncm91cCc7XG4gICAgdGhpcy5fX21lbWJlcnNfXyA9IFtdO1xuICB9XG4gIC8qKlxuICAqIENoZWNrIGlmIGlzIHByb3BlciBlbGVtZW50IG9yIGdyb3VwXG4gICovXG4gIF9fY2hlY2tFbF9fIChlbGVtZW50KSB7XG4gICAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIEJhc2ljRWxlbWVudCkpIHtcbiAgICAgIHRocm93IEVycm9yKCdPbmx5IGVsZW1lbnRzIG9yIGdyb3VwcyBjYW4gYmUgYWRkZWQnKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICogQ2hlY2sgaWYgaXMgcHJvcGVyIGdyb3VwXG4gICovXG4gIF9fY2hlY2tHcm91cF9fIChlbGVtZW50KSB7XG4gICAgaWYgKCEoZWxlbWVudCBpbnN0YW5jZW9mIEdyb3VwKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0dyb3VwIGV4cGVjdGVkJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAqIEFkZCBuZXcgZWxlbWVudHMgb3IgZ3JvdXBzXG4gICogdG8gY3VycmVudCBncm91cFxuICAqL1xuICBhZGQgKGVsZW1lbnQpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgLy8gSWYgQXJyYXkgYWRkIGFsbCBlbGVtZW50c1xuICAgIGlmICghaXNOYU4oZWxlbWVudC5sZW5ndGgpKSB7XG4gICAgICBmb3IgKGkgPSBlbGVtZW50Lmxlbmd0aDsgaS0tOykge1xuICAgICAgICB0aGlzLmFkZChlbGVtZW50W2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9fY2hlY2tFbF9fKGVsZW1lbnQpO1xuICAgIC8vIFJlbW92ZSBwcmV2aW91cyBncm91cDtcbiAgICBlbGVtZW50Lmdyb3VwLnJlbW92ZShlbGVtZW50KTtcbiAgICAvLyBhc3NzaWduIG5ldyBncm91cFxuICAgIGVsZW1lbnQuZ3JvdXAgPSB0aGlzO1xuICAgIHRoaXMuX19tZW1iZXJzX18ucHVzaChlbGVtZW50KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgKiBBZGQgbmV3IGVsZW1lbnRzIG9yIGdyb3Vwc1xuICAqIHRvIGN1cnJlbnQgZ3JvdXAgZnJvbSBkaWZmZXJlbnQgZ3JvdXBcbiAgKi9cbiAgYWRkQWxsRnJvbSAoZ3JvdXApIHtcbiAgICBsZXQgYXJyLFxuICAgICAgaSA9IDA7XG4gICAgdGhpcy5fX2NoZWNrR3JvdXBfXyhncm91cCk7XG4gICAgYXJyID0gZ3JvdXAuX19tZW1iZXJzX187XG4gICAgZm9yIChpID0gYXJyLmxlbmd0aDsgaS0tOykge1xuXG4gICAgfVxuICB9XG4gIC8qKlxuICAqIFJlbW92ZSBlbGVtZW50IGlzIG1lbWJlciBvZiBjdXJyZW50IGdyb3VwXG4gICovXG4gIHJlbW92ZSAoZWxlbWVudCkge1xuICAgIGxldCBtZW1iZXJzID0gdGhpcy5fX21lbWJlcnNfXyxcbiAgICAgIGkgPSAwLFxuICAgICAgaWkgPSBtZW1iZXJzLmxlbmd0aCxcbiAgICAgIGogPSAwO1xuICAgIHRoaXMuX19jaGVja0VsX18oZWxlbWVudCk7XG4gICAgZm9yICg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBpZiAobWVtYmVyc1tpXSA9PT0gZWxlbWVudCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgPT09IGlpKSB7IC8vIEVsZW1lbnQgbm90IGZvdW5kXG4gICAgICB0aHJvdyBFcnJvcignRWxlbWVudCBub3QgaW4gY3VycmVudCBncm91cCcpO1xuICAgIH0gZWxzZSB7IC8vIFJlbW92ZSB0aGUgZWxlbWVudFxuICAgICAgZm9yIChqID0gaSArIDE7IGogPCBpaTsgKytqKSB7XG4gICAgICAgIG1lbWJlcnNbaiAtIDFdID0gbWVtYmVyc1tqXTtcbiAgICAgIH1cbiAgICAgIG1lbWJlcnMucG9wKCk7XG4gICAgICBkZWxldGUgZWxlbWVudC5ncm91cDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICogUmVtb3ZlIGFsbCBlbGVtZW50c1xuICAqL1xuICByZW1vdmVBbGwgKCkge1xuICAgIGxldCBtZW1iZXJzID0gdGhpcy5fX21lbWJlcnNfXyxcbiAgICAgIGkgPSBtZW1iZXJzLmxlbmd0aDtcbiAgICBmb3IgKDsgaS0tOykge1xuICAgICAgZGVsZXRlIG1lbWJlcnNbaV0uZ3JvdXA7XG4gICAgfVxuICAgIC8vIFJlbW92ZSByZWZlcmVuY2VzIG9mIGFsbCBlbGVtZW50c1xuICAgIHRoaXMuX19tZW1iZXJzX18gPSBbXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgKiBPdmVycmlkaW5nIG1ldGhvZFxuICAqIEVyYXNlIGN1cnJlbnQgZ3JvdXAgYW5kIGFsbCBpdHMgY2hpbGRyZW5cbiAgKi9cbiAgZXJhc2UgKCkge1xuICAgIGxldCBtZW1iZXJzID0gdGhpcy5fX21lbWJlcnNfXyxcbiAgICAgIGkgPSBtZW1iZXJzLmxlbmd0aDtcbiAgICAvLyByZW1vdmUgYWxsIGNoaWxkcmVuXG4gICAgZm9yICg7IGktLTspIHtcbiAgICAgIG1lbWJlcnNbaV0uZXJhc2UoKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIHNlbGZcbiAgICBzdXBlci5lcmFzZSgpO1xuICB9XG59XG4iXSwiZmlsZSI6ImNhbnZhc2xpdGUtZXM2Lm1pbi5qcyJ9
